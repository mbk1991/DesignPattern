-디자인패턴(Design Pattern)
프로그램 개발 시 문제 해결을 위한 개발자들의 경험, 내적인 축적을
디자인 패턴이라는 형태로 정의하고 이름을 붙였다.
이를 Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides
4인의 개발자(GoF, The Gang of Four)가 
정리하여
Elements of Reusable Object-Oriented Software 
라는 책으로 발간하였다.
GoF가 정의한 23개의 디자인 패턴을 Java언어로 다루어본다.

-디자인 패턴의 용어를 빌리면 보다 용이하게 서로의 아이디어를 비교, 논의할 수 있다.
-매일 사용하는 프로그램을 새로운 시점에서 다시 생각하고, 재사용을 쉽게하고, 기능확장이
쉬운 소프트웨어를 만들기 위한 유익한 기법이 디자인 패턴이다.

-디자인 패턴에서 클래스 및 인스턴스의 관계 표현을 위해 UML(Unified Modeling Language)을 사용한다.
-클래스다이어그램에서 화살표의 방향. 화살표는 아는 것을 지목한다, 즉 자식이 부모를 가리킨다.
-클래스다이어그램은 정적, 시퀀스다이어그램은 동적
-다이어그램은 보는 것이 아니라 읽는 것이다.

▷Iterator패턴
-반복자, 루프변수와 같은 역할을 한다.
-Aggregate 인터페이스는 집합체를 나타낸다. like 배열
-클래스를 집합체로 다루기 위해 Aggregate 인터페이스를 구현시킨다.
-Iterator 인터페이스는 hasNext() next() 추상메소드를 정의
-Aggregate 인터페이스는 iterator() 추상메소드를 정의


-ConcreteIterator는 구체적인 순회 방법에 대한 알고리즘을 정한다. 
-ConcreteAggregate는 ConcreteIterator를 만든다.

-그냥 배열을 돌리면 되는데 왜 Iterator패턴을 쓰느냐? 구현에서 분리하기 위하여.
실제 java.util.Iterator 라이브러리에서 Iterator패턴을 활용하고 있다.

-다형성을 이용할 때 구현클래스, 상속클래스에만 정의한 메소드는 부모타입, 인터페이스타입에서 사용을 못한다.

-배열이든, ArrayList든 요소를 순회하면서 각각의 요소에 대해 처리를 해야할 일이 있다.
-배열이든 ArrayList든 여러 요소의 집합체(Aggregate)의 요소를 특정한 순회 방법에 따라
순회하며 각각의 요소에 대해 처리를 해야할 일이 있다.

집합체와 '순회' 를 분리하여 특정 Aggregate에 의존하지 않는 것이다.

클라이언트 단에서는
Iterator인터페이스의 hasNext()와 next()만 이용하지만

내부적으로는 구상 반복자, 구상 컬렉션에 따라 컬렉션과 순회법을 달리할 수 있다.


▷Adapter패턴 Wrapper패턴

-클라이언트가 무언가 할 때 A라는 방식을 사용한다.
-'무언가 유용한 기능'을 사용하려는데 이것은 B라는 방식으로만 사용할 수 있다.
-클라이언트가 A라는 방식을 고수하면서 B방식으로 동작하는 '무언가 유용한 기능'을 사용하려면 어떻게 해야할까?
-B방식을 A방식으로 수정하여야 할까? 이미 완성되어 있는 '무언가 유용한 기능'을 변경시키는 것은 좋지 않다.
-B방식을 A방식으로 포장한다면? 겉으로는 A방식으로 동작하게 된다.
-A방식 내부에서 B방식이 실행된다면?  A방식이지만 내부에서는 B방식을 실행시킨다.
-이미 구현되어 있는 기능을 클라이언트가 사용하는 방식에 맞춰 사용할 수 있도록 중간에서 변환시켜주는 것을 Adapter라고 한다.
-구방식을 고집하는 클라이언트인데 구방식 내부에서 신방식을 동작시킨다면, 겉으로는 구방식이지만 실제로는 신방식을 사용할 수 있다.
-Adapter패턴을 활용하면 클라이언트가 동작하는 방식은 변경하지 않고, 다양한 방식으로 동작하는 버전들을 클라이언트의 방식으로 포장시켜 동작시킬 수 있다.
-Adapter패턴은 구상을 추상으로 감싸거나, 내부 동작을 위임시켜 구현한다.
-Adapter패턴은 이미 만들어진 클래스를 새로운 인터페이스에 맞게 개조시키는 것이다.
-Adapter패턴은 이미 만들어진 클래스를 전혀 수정하지 않고 사용중인 인터페이스에 맞추는 것이다.

-Adapter패턴은 2가지 방식이 있다. 
-클라이언트가 인터페이스의 기능을 이용하고 있을 때에는 확장과 구현을 통해 Adapter를 구현한다.(인터페이스이므로 다중 상속)

-클라이언트가 클래스의 기능을 이용하고 있을 때에는 확장과 위임을 통해 Adapter를 구현한다.(Adapter가 두 클래스를 다중 상속 받을 수 없으므로) 


▷Template Method패턴
-템플릿은 정해진 형태를 만드는 틀이다.
-템플릿을 통해 형태를 만들 때 재료는 다양하게 바꿔볼 수 있다.
-템플릿 역할을 하는 '템플릿메소드'를 만들어 사용하는 패턴이 Template Method 패턴이다.
-템플릿 메소드로 공통된 흐름, 뼈대를 정의하고 내부적인 동작은 구상에 맡긴다.
-상위 클래스에서 템플릿 메소드를 정의한다.
-템플릿 메소드 내에는 추상 메소드들로 공통된 로직, 흐름, 뼈대를 잡아 놓았다.
-템플릿 메소드 내의 추상메소드의 구체적인 기능은 하위 클래스에서 정한다.
-상위 클래스의 템플릿 메소드에서 흐름을 정하고 하위 클래스에서는 흐름 속의 구체적인 처리를 결정한다.
-공통적인 특정 흐름, 뼈대를 가지는 기능 A,B,C를 만들어야 할 때 완성된 A기능을 복사하여 B와 C기능을 만들고
각각 다르게 구현할 부분만 수정을 한다면 어떨까? 
-공통된 흐름에 대한 부분이 중복되고 수정 및 유지 보수 시 A,B,C코드를 모두 변경하여야 한다. 
-특정 로직으로 동작할 메소드를 템플릿 메소드로 정의하고 세부적인 내용은 하위 클래스에서 정하는 패턴인 것이다.


▷Factory Method패턴


-템플릿메소드 패턴으로 인스턴스를 생성하는 패턴이 팩토리메소드패턴이다.
-인스턴스 생성을 템플릿메소드 패턴으로 수행하는 방법이다.
-인스턴스를 생성해주는 객체를 Factory라고 표현한다.
-인스턴스 생성 방법과 인스턴스를 생성할 클래스를 분리하는 것이다.
-팩토리는 인스턴스를 만든다.
-상위클래스에서 인스턴스 생성방법( 인스턴스 생성을 위한 공통된 로직, 흐름, 뼈대 ) 를 템플릿메소드패턴으로 정의한다.
-하위클래스에서 특정 인스턴스를 생성하기 위한 구체적인 방법을 작성한다.

-subclass responsibility 대처 방법
1) 추상메소드
2) 디폴트 준비
3) 상위에서 예외던지기


▷Singleton 패턴


▷Prototype 패턴

-Java에서 인스턴스를 생성하는 방법
-new 연산자로 클래스 이름을 지정하여 생성하는 방법
-인스턴스를 복사해서 생성하는 방법 -> Prototype 패턴
-"원래의 서류를 어떻게 만들었는지는 몰라도 복사기로 서류의 복사본을 만들 수 있다"
-"원래의 객체를 어떻게 만들었는지는 몰라도 clone()으로 객체의 복사본을 만들 수 있다"
-Java에서는 Cloneable을 implements한 클래스는 Object의 clone() 메소드를 사용할 수 있다.
-clone()메소드를 사용하면 인스턴스 자기 자신에 대한 복사체 (필드 값 포함) 를 만들어 반환한다.
-클래스의 이름을 몰라도 clone()메소드로 자기 자신의 인스턴스를 만들 수 있다.
-Cloneable 인터페이스를 implements한 인터페이스의 구상클래스들은 모두 자기 자신의 복사체를 만들어
 반환할 수 있다.
- obj = clone(); 이면 자기 자신의 복사체를 obj에 담을 수 있는 것
-Prototype 인터페이스는 createClone() 추상메소드를 정의한다.
-Prototype의 구상클래스는 createClone() 메소드를 오버라이드하고 자기 자신의 복사본을 반환한다.

왜쓰는거지

-복잡한 작업을 거쳐서 생성하는 인스턴스는 저장해두었다가 필요할 때 복사해서 사용한다.
-관리할 인스턴스의 종류가 너무 많아 클래스로 정리되지 않는경우 (?) 사용한다.
-인스턴스 생성 소스를 특정 클래스에 의존하지 않도록 만들기 위해 사용한다.


▷Builder패턴
-객체를 생성하는 디자인 패턴
-복잡한 객체를 단계별로 생성해나가는 패턴
-객체 생성을 단계별로 빌드업 해나간다.
-객체 생성방법에는 점층적 생성자패턴, 자바빈즈패턴, 필더 패턴이 존재한다.
-구조를 가진 인스턴스를 쌓아올리는 패턴이다.
-Builder는 객체 생성 단계(절차) 에 대한 추상메소드를 정의한다. ex) 인스턴스 생성을 위한 절차 step1, step2, step3
-Builder가 정의한 추상메소드는 각각의 하위 클래스에서 구체화한다.
-Director는 Builder의 메소드를 이용하여 인스턴스(객체) 를 조립(구축)한다

-빌더는 자신의 클래스에서 객체 생성에 대한 코드를 추출한다. 
-빌더는 객체 제작 단계별 방법을 구현한다.
-디렉터는 빌더의 방법을 가지고 단계별로 객체를 조립한다.

-빌더패턴에 항상 디렉터가 있지는 않다. 하지만 빌더의 방법을 가지고 다양한 객체 생성 루틴을 가지고 있는 디렉터가 있다면 편리하다.

-다양한 빌더들은 다양한 방식으로 같은 작업을 실행한다.

-수많은 필드와 중첩된 객체를 힘들게 단계별로 초기화해야 하는 복잡한 객체가 있을 때
초기화 코드는 수많은 매개변수를 가진 거대한 생성자 내부에 묻혀 있을 수 있다. - 모든 매개변수가 다 필요하지 않다.
또는 초기화 코드가 클라이언트 코드전체에 흩어져있을 수 있다.


-점층적 생성자패턴은 메소드 오버로딩을 지원하는 Java나 C#같은 언어에서만 가능하다.
-매개변수가 다양한 여러개의 생성자를 사용하는 점층적 생성자 패턴을 빌더패턴으로 바꿀 수 있다.

-공통 생성 단계를 명확하게 정의해야 한다.

-SRP. 복잡한 객체 생성 코드를 분리한다.

-팩토리메소드로 시작해 빌더패턴, 추상팩토리패턴, 프로토타입패턴으로 발전한다.

-빌더패턴은 복잡한 객체의 단계별 생성에 주안점
-추상팩토리 패턴은 관련객체 패밀리 생성에 주안점

-StringBuilder에서 사용한다!?



▷Abstract Factory  패턴

-제품군(패밀리)를 생성하는 패턴이다.
-추상적인 팩토리는 추상적인 부품으로 추상적인 제품을 만든다.
-클라이언트는 추상적인 팩토리의 기능을 사용한다.
-클라이언트는 추상적인 팩토리에 대입되는 구체적인 팩토리에 해당하는 제품군을 생성할 수 있다.
-Class 클래스의 forName메소드로 클래스를 동적으로 읽을 수 있다.


▷Bridge패턴
-하위 클래스를 만들 때 상위 클래스의 기능을 '확장' 할수도 있고 상위클래스의 인터페이스를 '구현' 할 수도 있다.
-하위클래스에서 기능을 추가하는 것과 상위클래스의 기능을 구현하려는 것이 혼재되면 클래스 계층을 복잡하게 한다.
-클래스 계층이란 상위클래스(부모)와 하위클래스(자식)의 계층을 말한다.
-기능을 추가하는(확장하는) 클래스 계층을 '기능의 클래스 계층'이라 할 수 있다.
-상위 클래스의 기능을 구현하는 클래스 계층을 '구현의 클래스 계층'이라 할 수 있다.
-기능의 클래스 계층에서는 구현의 클래스 계층에서 최상위 클래스 타입을 전달 받아 사용한다.
-구현을 나타내는 클래스의 인스턴스를 필드에 저장하여 사용하는데, 이 필드가 기능의 클래스 계층과 구현의 클래스 계층의'다리(Bridge)'이다.
-기능의 클래스 계층과 구현의 클래스 계층, 즉 기능계층과 구현계층을 분리해두면 확장이 편리해진다.
-기능을 추가하기 위하여 구현 계층을 수정할 필요가 전혀 없다.
-기능 계층에 새롭게 추가한 기능은 '모든 구현'에서 이용할 수 있다.
-상속(Inheritance) 는 강한 연결이고 위임(Delegation)은 약한 연결이다.
-상속은 SuperClass extends SubClass 와 같이 '소스 코드' 로서 강하게 명시되어 있기 때문에 이 관계를 끊기 위해서는 소스 코드를 바꾸어 주어야 한다.
-위임은 주입받기에 따라 클래스 간의 관계를 척척 바꾸기 편리하다.


▷Strategy패턴
- strategy = 전략 = 알고리즘
- 같은 문제를 다른 방법으로 해결하기 위한 '알고리즘 교체 전략' 이 Strategy패턴이다.
- 가위바위보를 이기기위한 전략을 전략A, 전략B, 전략C... 등의 방법으로 교체한다.
- 알고리즘이 메소드 내부에 녹아 있는 경우가 많다.
- 알고리즘을 의식적으로 분리하고 알고리즘에 대한 인터페이스(API)를 규정한다.
- 규정한 알고리즘 인터페이스를 위임하여 이용한다.
- 위임이라는 느슨한 연결을 사용하여 알고리즘을 용이하게 교체할 수 있다.
- strategy 패턴에서 위임을 사용하여 런타임 중 전략을 교체할 수 있다.(동적인 교체) 
- 위임하는 곳을 교환하는 패턴이다.


